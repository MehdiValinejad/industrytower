@model IndustryTower.Models.Product

@{
    ViewBag.Title = Resource.createProduct;
}


<div id="productCreateEdit" class="row dir">
    @using (Html.BeginForm())
    {
        @Html.ValidationSummary(true)
        @Html.Hidden("company", ViewData["company"])

        @Html.AntiForgeryToken()

        <div class="col-md-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    @Resource.createProduct
                </div>
                <div class="panel-body">
                    <div class="col-md-4 dirltr   hasUpload">
                        <div class="bottom-border-blue">
                            @Resource.upload
                        </div>
                        <div id="uploadButton" class="fileUpload-button glyphicon glyphicon-upload btn btn-lg btn-default" title="@Resource.upload" data-placement="bottom">
                            @Html.TextBox("ProServFiles", null, new { @type = "file", @name = "files[]", @class = "post-files" })
                        </div>
                        <div class="progress col-md-12">
                            <div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">
                                <span class="sr-only">0% complete</span>
                            </div>
                        </div>

                        <div id="uploadedFiles" class="col-md-12">
                            @Html.Hidden("filesToUpload")
                            <ul id="uploadedImages" class="no-pad list-unstyled">
                                <div class="bottom-border-blue display-none subject-small">
                                    @Resource.uploadedImages
                                </div>
                                @if (Model != null && Model.image != null)
                                {
                                    foreach (var image in Model.image.Split(new char[] { ',' }))
                                    {
                                        var ext = image.Substring(image.LastIndexOf('.') + 1);
                                        <li>
                                            <button type='button' class='close'><span aria-hidden='true'>&times;</span><span class='sr-only'>Close</span></button>
                                            <img src="~/Uploads/@ext/Product/@image" class='thumbnail full-height' />

                                        </li>
                                    }
                                }
                            </ul>
                            <ul id="uploadedDocuments" class="no-pad list-unstyled">
                                <div class="bottom-border-blue display-none subject-small">
                                    @Resource.uploadedDocuments
                                </div>
                                @if (Model != null && Model.document != null)
                                {
                                    foreach (var file in Model.document.Split(new char[] { ',' }))
                                    {
                                        var ext = file.Substring(file.LastIndexOf('.') + 1);
                                        <li>
                                            <button type='button' class='close'><span aria-hidden='true'>&times;</span><span class='sr-only'>Close</span></button>
                                            <a href="~/Uploads/@ext/Product/@file">
                                                <span class="@String.Concat("icon-", ext) thumbnail"></span>
                                            </a>
                                        </li>
                                    }
                                }
                            </ul>

                        </div>

                    </div>

                    <div class="col-md-8">
                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.productName, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.productName) })
                            @Html.ValidationMessageFor(model => model.productName)
                        </div>

                        <div class="form-group col-md-6 dirltr">
                            @Html.TextBoxFor(model => model.productNameEN, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.productNameEN) })
                            @Html.ValidationMessageFor(model => model.productNameEN)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.brandName, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.brandName) })
                            @Html.ValidationMessageFor(model => model.brandName)
                        </div>

                        <div class="form-group col-md-6 dirltr">
                            @Html.TextBoxFor(model => model.brandNameEN, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.brandNameEN) })
                            @Html.ValidationMessageFor(model => model.brandNameEN)
                        </div>

                        <div class="form-group col-md-12">
                            @Html.TextAreaFor(model => model.about, new { @class = "form-control", @onkeyup = "textAreaAdjust(this)", @placeholder = Html.DisplayNameFor(model => model.about) })
                            @Html.ValidationMessageFor(model => model.about)
                        </div>

                        <div class="form-group col-md-12 dirltr">
                            @Html.TextAreaFor(model => model.aboutEN, new { @class = "form-control", @onkeyup = "textAreaAdjust(this)", @placeholder = Html.DisplayNameFor(model => model.aboutEN) })
                            @Html.ValidationMessageFor(model => model.aboutEN)
                        </div>

                        <div class="form-group col-md-6">

                                @Html.LabelFor(model => model.PorT)
                           
                            @Html.DropDownListFor(model => model.PorT, ViewBag.portDropdown as SelectList, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PorT)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.DropDownList("productionCountryID", ViewBag.CountryDropDown as SelectList, ModelDisplayName.serviceCountry, new { @class = "form-control" })
                        </div>

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.price, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.price) })
                            @Html.ValidationMessageFor(model => model.price)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.weight, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.weight) })
                            @Html.ValidationMessageFor(model => model.weight)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.height, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.height) })
                            @Html.ValidationMessageFor(model => model.height)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.width, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.width) })
                            @Html.ValidationMessageFor(model => model.width)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.length, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.length) })
                            @Html.ValidationMessageFor(model => model.length)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.power, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.power) })
                            @Html.ValidationMessageFor(model => model.power)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.shabnam, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.shabnam) })
                            @Html.ValidationMessageFor(model => model.shabnam)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.iranCode, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.iranCode) })
                            @Html.ValidationMessageFor(model => model.iranCode)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.packCount, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.packCount) })
                            @Html.ValidationMessageFor(model => model.packCount)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.price, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.price) })
                            @Html.ValidationMessageFor(model => model.price)
                        </div>

                        

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.wuarantee, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.wuarantee) })
                            @Html.ValidationMessageFor(model => model.wuarantee)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.guarantee, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.guarantee) })
                            @Html.ValidationMessageFor(model => model.guarantee)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.TextBoxFor(model => model.afterSale, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.afterSale) })
                            @Html.ValidationMessageFor(model => model.afterSale)
                        </div>

                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.shipFree)
                            @Html.RadioButtonFor(model => model.shipFree, false, new { @checked = "checked" }) @Resource.no
                            @Html.RadioButtonFor(model => model.shipFree, true, false) @Resource.yes
                            @Html.ValidationMessageFor(model => model.shipFree)
                        </div>

                        <div class="bg-default col-md-12 margin-top-bot-md">
                            <div class="col-md-12 margin-top-bot-md">
                                <div id="SelectedCategories">
                                    <div class="panel panel-default">
                                        <div class="panel-heading">
                                            <strong>
                                                @Resource.selectedCategories
                                            </strong>
                                        </div>
                                        <div class="panel-body">

                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="bottom-border-blue">
                                @Resource.categoryChooseHelp
                            </div>

                            @Html.AjaxPrtialLoader(Url.Action("CategoryTags", "Category"), true)
                        </div>
                        @Html.Hidden("Cats", ViewData["Cats"] != null ? ViewData["Cats"] : null)
                        <input type="submit" value='@Resource.createProduct' id="askButton" class="btn btn-primary col-md-12" data-loading-text="@Resource.loading" />
                    </div>
                </div>
            </div>
        </div>

    }
</div>


@section scripts{
    @Scripts.Render("~/bundles/Product")
    @Scripts.Render("~/bundles/Category")
    @Scripts.Render("~/bundles/CountryDropDown")
    @Scripts.Render("~/bundles/Upload")

    <script>
        $(document).ready(function () {
            GategoryTags('@IndustryTower.App_Start.ITTConfig.MaxCategoryTagsLimit',
                '@ModelValidation.YouCanChooseMaxCategories',
                '@ModelValidation.categoryParentIsChoosed'
                );

            //Call Upload File
            UploadFile('@IndustryTower.App_Start.ITTConfig.FileSizeLimit',
                           '@IndustryTower.App_Start.ITTConfig.MaxFilesCountProServ',
                           '@ModelValidation.maxUploadFileLimit',
                           '@ModelValidation.maxUploadFileCount',
                           '@ModelValidation.fileTypeLimit');

            AjaxStateDropDown('@Url.Action("populateDopDownStates", "Home")', '@Resource.selectState');
        });
    </script>
}
