@model IndustryTower.ViewModels.CommentViewModel

@foreach (var comment in Model.Comments)
{
    <li id="comment" class="comment-cont col-md-12 col-xs-12">
        <div id="commentBody" class="row">
            <div class="col-md-12">
                <blockquote id="commentBody" class="blockquote-reverse font-mini col-md-12 col-xs-12">
                    <div class="row">
                        @Html.ProfilePic(user: comment.CommenterUser, linkhtmlAttributes: new { @class = "col-md-1 col-xs-2 margin-lf-r8-md" })
                        <div class="comment-text dir">

                            <p>
                                @if (AuthorizationHelper.isRelevant(comment.CommenterUser.UserId))
                                {
                                    @Html.ModifyIcons("", "Delete", "Comment", new { CmtId = EncryptionHelper.Protect(comment.cmtID) }, "display-none",editvis:false)
                                }
                                <span>
                                    @Html.ActionLink(comment.CommenterUser.CultureFullName, "UProfile", "UserProfile", new { UId = comment.CommenterUser.UserId, UName = StringHelper.URLName(comment.CommenterUser.CultureFullName) })
                                </span>
                                @Html.DisplayFor(model => comment.comment)
                            </p>


                        </div>

                        <footer class="comment-date">
                            @Html.DisplayFor(model => comment.date, "RelativeDate")

                            <div id="commentLike" class="inline-block">
                                @{ Html.RenderAction("LikeComment", "Like", new { model = new IndustryTower.ViewModels.likeVars { elemId = comment.cmtID, typ = IndustryTower.ViewModels.LikeType.LikeComment } }); }
                            </div>
                        </footer>
                    </div>

                </blockquote>
            </div>

        </div>
    </li>

   

}


@if (!(bool)ViewData["finalPage"])
{
    <li id="nextComments">
        @{
            var se = new MvcSerializer();
            var mod = new IndustryTower.ViewModels.commentVars
            {
                elemId = Model.prams.elemId,
                typ = Model.prams.typ
            };
            var tt = se.Serialize(mod, SerializationMode.Plaintext);
        }
        @Html.NextItems("Comments", "Comment", new
                       {
                           model = tt,
                           commentPage = (int)ViewData["pageNum"] + 1
                       }, "next-comments-link btn btn-default col-md-12 btn btn-default btn-xs text-center", caption: Resource.nextComments,imgclass: "inline-block")
    </li>
}

