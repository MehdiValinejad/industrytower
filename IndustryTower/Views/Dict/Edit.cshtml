@model IndustryTower.Models.Dict

@{
    ViewBag.Title = String.Concat(Resource.edit," - " ,Model.name);
}
<div class="row">
    <div id="dictCreateEdit" class="col-md-offset-2 col-md-8 dir">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3>
                    @Resource.edit - @Model.name
                    <span class="pull-left">
                        <span class="glyphicon glyphicon-list-alt "></span>
                    </span>
                </h3>

            </div>
            <div class="panel-body">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary()
                    <div class="group-admin-choose hasUserChoose row form-group">
                        <ul id="choosedUsers" class="col-md-12 list-unstyled">
                            @if (Model.Admins.Count > 0)
                            {
                                foreach (var item in Model.Admins)
                                {
                                    <li class="btn btn-default" data-id="@EncryptionHelper.Protect(item.UserId)">
                                        <button type="button" class="close pull-right"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                                        <div class="inline-block">
                                            <span class="us-txt" data-name="@Html.DisplayFor(model => item.CultureFullName)">
                                                <strong>@Html.DisplayFor(model => item.CultureFullName)</strong>
                                            </span>
                                            <div class="overflow-hidden" style="max-width:200px">
                                                <small>
                                                    @Html.AboutUser(item)
                                                </small>
                                            </div>

                                        </div>
                                        <div class="inline-block">
                                            @Html.ProfilePic(user: item, imghtmlAttributes: new { @class = "min-img" })
                                        </div>
                                    </li>
                                }
                            }
                            @Html.Hidden("UserTags")
                        </ul>

                        <div class="form-group col-md-12">
                            @Html.TextBox("newUser", null, new
                                        {
                                            @class = "has-mini-search form-control",
                                            data_minisearch = Url.Action("_UserSearchPartial", "UserProfile"),
                                            placeholder = Resource.typeToSearchUser
                                        })
                        </div>
                    </div>

                    <div class="form-group col-md-12">
                        @Html.TextAreaFor(model => model.desc, new { @class = "form-control", placeholder = ModelDisplayName.dicDesc, @onkeyup = "textAreaAdjust(this)" })
                        @Html.ValidationMessageFor(model => model.desc)
                    </div>

                    <div class="bg-default col-md-12 margin-top-bot-md">
                        @Html.Hidden("professionTags", String.Join(",", Model.Professions.Select(p => p.profID)))
                        <div id="selectedProfs" class="col-md-12 margin-top-bot-md">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <strong>
                                        @Resource.selectedProfessions
                                    </strong>
                                </div>
                                <div class="panel-body">
                                    @foreach (var prof in Model.Professions)
                                    {
                                        <div id='selectedProf' class='pink-tag inline-block selectedtag-marg' data-id="@prof.profID">
                                            @Html.DisplayFor(model => prof.CultureProfessionName)
                                            <button type="button" class="close"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12 margin-top-bot-md">
                            <div class="bottom-border-blue">
                                @Resource.professionChooseHelp
                            </div>
                            <div class="form-group">
                                <input type="text" id="ProfessionSearchBox" value="" placeholder="@Resource.professionTagChoose" class="form-control" />
                            </div>
                            <div class="professtionTags-container panel panel-default pos-rel">
                                <div id="loading">

                                </div>
                            </div>
                        </div>
                    </div>

                    <input type="submit" value="@Resource.create" class="btn btn-primary col-md-4 col-md-offset-4" data-loading-text="@Resource.loading" />
                }
            </div>
        </div>
    </div>
</div>



@section scripts{
    @Scripts.Render("~/bundles/UserTags")
    @Scripts.Render("~/bundles/Dict")
    @Scripts.Render("~/bundles/Profession")
    <script type="text/javascript">
        $(document).ready(function () {
            ProfessionsTag('@IndustryTower.App_Start.ITTConfig.MaxProfessionTagsLimit',
                      '@ModelValidation.YouCanChooseMax5Professions');
        });
    </script>
}
