@model IndustryTower.Models.Certificate

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
    <h4 class="modal-title">
        <span class="glyphicon glyphicon-certificate"></span>
        @Resource.certificates
    </h4>
</div>
@using (Html.BeginForm())
{
    <div id="experienceCreate" class="modal-body dir row">
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        @Html.Hidden("company", EncryptionHelper.Protect(ViewData["company"]))
        <div class="form-group col-md-12">
            @Html.TextBoxFor(model => model.Certificator, new { @class = "form-control", @placeholder = ModelDisplayName.certificator })
            @Html.ValidationMessageFor(model => model.Certificator)
        </div>
        <div class="form-group col-md-12">
            @Html.TextBoxFor(model => model.CertificatorEN, new { @class = "form-control dirltr", @placeholder = ModelDisplayName.certificatorEN })
            @Html.ValidationMessageFor(model => model.CertificatorEN)
        </div>

        <div class="form-group col-md-12">
            @Html.TextBoxFor(model => model.Name, new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => Model.Name) })
            @Html.ValidationMessageFor(model => model.Name)
        </div>

        <div class="form-group col-md-12">
            @Html.TextBoxFor(model => model.NameEN, new { @class = "form-control dirltr", @placeholder = Html.DisplayNameFor(model => Model.NameEN) })
            @Html.ValidationMessageFor(model => model.NameEN)
        </div>
        <div class="form-group col-md-6">
            @Html.TextBoxFor(model => model.licenceNo, new { @class = "form-control dirltr", @placeholder = ModelDisplayName.certificateLicence })
            @Html.ValidationMessageFor(model => model.licenceNo)
        </div>
        <div class="form-group col-md-6 dirltr">
            <div class="input-group">
                @Html.EditorFor(model => model.certificatorURL, "Web", new { @class = "form-control dirltr", @placeholder = ModelDisplayName.certificateURL })
            </div>
            @Html.ValidationMessageFor(model => model.certificatorURL)
        </div>

        <div class="form-group col-md-6 col-md-offset-3">

                @Html.EditorFor(model => model.certificationDate, "{0:yyyy/MM/dd}", new { @placeholder = Html.DisplayNameFor(model => Model.certificationDate), @class = "form-control hasDatePick" })

            @Html.ValidationMessageFor(model => model.certificationDate, ModelValidation.datetime)
        </div>

    </div>
    <div class="modal-footer dir">
        <button type="button" class="btn btn-default" data-dismiss="modal">@Resource.close</button>
        <input type="submit" value="@Resource.edit" class="btn btn-primary" data-loading-text="@Resource.loading" />
    </div>
}


@*<div class="left-aligned">
    @using (Html.BeginForm()) {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <fieldset>
            <legend>Certificate</legend>


            <div class="editor-field">
                @Html.DisplayNameFor(Model=>Model.Certificator)
                @Html.TextBoxFor(model => model.Certificator, new { @placeholder = Html.DisplayNameFor(Model=>Model.Certificator)})
                @Html.ValidationMessageFor(model => model.Certificator)
            </div>
            @Html.Hidden("company", EncryptionHelper.Protect(ViewData["company"]))

            <div class="editor-field">
                @Html.DisplayNameFor(Model=>Model.CertificatorEN)
                @Html.TextBoxFor(model => model.CertificatorEN, new { @placeholder = Html.DisplayNameFor(Model=>Model.CertificatorEN)})
                @Html.ValidationMessageFor(model => model.CertificatorEN)
            </div>

            <div class="editor-field">
                @Html.DisplayNameFor(Model=>Model.Name)
                @Html.TextBoxFor(model => model.Name, new { @placeholder = Html.DisplayNameFor(Model=>Model.Name), @class="medium-input"})
                @Html.ValidationMessageFor(model => model.Name)
            </div>

            <div class="editor-field">
                @Html.DisplayNameFor(Model=>Model.NameEN)
                @Html.TextBoxFor(model => model.NameEN, new { @placeholder = Html.DisplayNameFor(Model=>Model.NameEN), @class="medium-input"})
                @Html.ValidationMessageFor(model => model.NameEN)
            </div>

            <div class="editor-field">
                @Html.DisplayNameFor(Model=>Model.licenceNo)
                @Html.TextBoxFor(model => model.licenceNo, new { @placeholder = Html.DisplayNameFor(Model=>Model.licenceNo), @class="short-input"})
                @Html.ValidationMessageFor(model => model.licenceNo)
            </div>

            <div class="editor-field">
                @Html.DisplayNameFor(Model=>Model.certificatorURL)
                @Html.TextBoxFor(model => model.certificatorURL, new { @placeholder = Html.DisplayNameFor(Model=>Model.certificatorURL), @class="large-input"})
                @Html.ValidationMessageFor(model => model.certificatorURL)
            </div>

            <div class="editor-field">
                @Html.DisplayNameFor(Model=>Model.certificationDate)
                @Html.EditorFor(model => model.certificationDate, "{0:yyyy/MM/dd}", new { @placeholder = Html.DisplayNameFor(Model=>Model.certificationDate) , @class="short-input hasDatePick" })
                @Html.ValidationMessageFor(model => model.certificationDate)

            </div>

            <div id="modalConfirm" class="submitContainer">
                <input type="submit" value="@Resource.edit" />
            </div>
        </fieldset>
    }
</div>*@

@Scripts.Render("~/bundles/DatePicker")